import React, { useState } from "react";
import "../adminView/adminGlobal.css";

const data = [
  { id: 1, name: "React Basics", date: "2024-01-15" },
  { id: 2, name: "Advanced React", date: "2024-02-10" },
  { id: 3, name: "Hooks Deep Dive", date: "2024-03-05" },
  { id: 4, name: "Redux Toolkit", date: "2024-04-01" },
  { id: 5, name: "Testing React", date: "2024-05-12" },
  { id: 6, name: "React Performance", date: "2024-06-20" },
  { id: 7, name: "React Router", date: "2024-07-15" },
  { id: 8, name: "React and TypeScript", date: "2024-08-10" },
];

const TrainingContainer = () => {
  const [currentPage, setCurrentPage] = useState(1);
  const [selectedRows, setSelectedRows] = useState([]);
  const rowsPerPage = 5;

  const indexOfLastRow = currentPage * rowsPerPage;
  const indexOfFirstRow = indexOfLastRow - rowsPerPage;
  const currentRows = data.slice(indexOfFirstRow, indexOfLastRow);

  const totalPages = Math.ceil(data.length / rowsPerPage);

  const isChecked = (id) => selectedRows.includes(id);

  const handleCheckboxChange = (id) => {
    setSelectedRows((prev) =>
      prev.includes(id) ? prev.filter((rowId) => rowId !== id) : [...prev, id]
    );
  };

  const handleSelectAll = (e) => {
    if (e.target.checked) {
      const currentPageIds = currentRows.map((row) => row.id);
      const newSelected = Array.from(new Set([...selectedRows, ...currentPageIds]));
      setSelectedRows(newSelected);
    } else {
      const currentPageIds = currentRows.map((row) => row.id);
      const newSelected = selectedRows.filter((id) => !currentPageIds.includes(id));
      setSelectedRows(newSelected);
    }
  };

  const isAllSelected = currentRows.every((row) => selectedRows.includes(row.id));

  const handlePageChange = (pageNumber) => {
    setCurrentPage(pageNumber);
  };

  return (
    <div className="training-tables">
      <h3>Training Sessions</h3>
      <div className="table_design">
        <table>
          <thead>
            <tr>
              <th>
                <input
                  type="checkbox"
                  checked={isAllSelected}
                  onChange={handleSelectAll}
                />
              </th>
              <th>ID</th>
              <th>Name</th>
              <th>Date</th>
            </tr>
          </thead>
          <tbody>
            {currentRows.map((row) => (
              <tr
                key={row.id}
                className={isChecked(row.id) ? "active-row" : ""}
              >
                <td>
                  <input
                    type="checkbox"
                    checked={isChecked(row.id)}
                    onChange={() => handleCheckboxChange(row.id)}
                  />
                </td>
                <td>{row.id}</td>
                <td>{row.name}</td>
                <td>{row.date}</td>
              </tr>
            ))}
          </tbody>
        </table>

        <div className="pagination">
          {[...Array(totalPages)].map((_, index) => (
            <button
              key={index}
              onClick={() => handlePageChange(index + 1)}
              className={currentPage === index + 1 ? "active-page" : ""}
            >
              {index + 1}
            </button>
          ))}
        </div>
      </div>
    </div>
  );
};

export default TrainingContainer;